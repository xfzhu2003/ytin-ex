#ifndef __G_LIST_H__
#define __G_LIST_H__

/* Provide type definitions for commonly used types.
 *  These are useful because a "gint8" can be adjusted
 *  to be 1 byte (8 bits) on all platforms. Similarly and
 *  more importantly, "gint32" can be adjusted to be
 *  4 bytes (32 bits) on all platforms.
 */

typedef char   gchar;
typedef short  gshort;
typedef long   glong;
typedef int    gint;
typedef gint   gboolean;

typedef unsigned char   guchar;
typedef unsigned short  gushort;
typedef unsigned long   gulong;
typedef unsigned int    guint;

typedef float   gfloat;
typedef double  gdouble;

typedef void* gpointer;
typedef const void *gconstpointer;

typedef gint            (*GCompareFunc)         (gconstpointer  a,
                                                 gconstpointer  b);
typedef gint            (*GCompareDataFunc)     (gconstpointer  a,
                                                 gconstpointer  b,
						 gpointer       user_data);
typedef gboolean        (*GEqualFunc)           (gconstpointer  a,
                                                 gconstpointer  b);
typedef void            (*GDestroyNotify)       (gpointer       data);
typedef void            (*GFunc)                (gpointer       data,
                                                 gpointer       user_data);
typedef guint           (*GHashFunc)            (gconstpointer  key);
typedef void            (*GHFunc)               (gpointer       key,
                                                 gpointer       value,
                                                 gpointer       user_data);
typedef void            (*GFreeFunc)            (gpointer       data);

#ifndef	FALSE
#define	FALSE	(0)
#endif

#ifndef	TRUE
#define	TRUE	(!FALSE)
#endif

#define GPOINTER_TO_INT(p)	((gint)   (p))
#define GPOINTER_TO_UINT(p)	((guint)  (p))

#define GINT_TO_POINTER(i)	((gpointer)  (i))
#define GUINT_TO_POINTER(u)	((gpointer)  (u))


typedef struct _GSList		GSList;

struct _GSList
{
  gpointer data;
  GSList *next;
};

/* Singly linked lists
 */
GSList*  g_slist_alloc          (void);
void     g_slist_free           (GSList           *list);
void     g_slist_free_1         (GSList           *list);
GSList*  g_slist_append         (GSList           *list,
				 gpointer          data);
GSList*  g_slist_prepend        (GSList           *list,
				 gpointer          data);
GSList*  g_slist_insert         (GSList           *list,
				 gpointer          data,
				 gint              position);
GSList*  g_slist_insert_sorted  (GSList           *list,
				 gpointer          data,
				 GCompareFunc      func);
GSList*  g_slist_insert_before  (GSList           *slist,
				 GSList           *sibling,
				 gpointer          data);
GSList*  g_slist_concat         (GSList           *list1,
				 GSList           *list2);
GSList*  g_slist_remove         (GSList           *list,
				 gconstpointer     data);
GSList*  g_slist_remove_all     (GSList           *list,
				 gconstpointer     data);
GSList*  g_slist_remove_link    (GSList           *list,
				 GSList           *link_);
GSList*  g_slist_delete_link    (GSList           *list,
				 GSList           *link_);
GSList*  g_slist_reverse        (GSList           *list);
GSList*  g_slist_copy           (GSList           *list);
GSList*  g_slist_nth            (GSList           *list,
				 guint             n);
GSList*  g_slist_find           (GSList           *list,
				 gconstpointer     data);
GSList*  g_slist_find_custom    (GSList           *list,
				 gconstpointer     data,
				 GCompareFunc      func);
gint     g_slist_position       (GSList           *list,
				 GSList           *llink);
gint     g_slist_index          (GSList           *list,
				 gconstpointer     data);
GSList*  g_slist_last           (GSList           *list);
guint    g_slist_length         (GSList           *list);
void     g_slist_foreach        (GSList           *list,
				 GFunc             func,
				 gpointer          user_data);
GSList*  g_slist_sort           (GSList           *list,
				 GCompareFunc      compare_func);
GSList*  g_slist_sort_with_data (GSList           *list,
				 GCompareDataFunc  compare_func,
				 gpointer          user_data);
gpointer g_slist_nth_data       (GSList           *list,
				 guint             n);
#define  g_slist_next(slist)	((slist) ? (((GSList *)(slist))->next) : NULL)



typedef struct _GList		GList;

struct _GList
{
  gpointer data;
  GList *next;
  GList *prev;
};

/* Doubly linked lists
 */
GList*   g_list_alloc          (void);
void     g_list_free           (GList            *list);
void     g_list_free_1         (GList            *list);
GList*   g_list_append         (GList            *list,
				gpointer          data);
GList*   g_list_prepend        (GList            *list,
				gpointer          data);
GList*   g_list_insert         (GList            *list,
				gpointer          data,
				gint              position);
GList*   g_list_insert_sorted  (GList            *list,
				gpointer          data,
				GCompareFunc      func);
GList*   g_list_insert_before  (GList            *list,
				GList            *sibling,
				gpointer          data);
GList*   g_list_concat         (GList            *list1,
				GList            *list2);
GList*   g_list_remove         (GList            *list,
				gconstpointer     data);
GList*   g_list_remove_all     (GList            *list,
				gconstpointer     data);
GList*   g_list_remove_link    (GList            *list,
				GList            *llink);
GList*   g_list_delete_link    (GList            *list,
				GList            *link_);
GList*   g_list_reverse        (GList            *list);
GList*   g_list_copy           (GList            *list);
GList*   g_list_nth            (GList            *list,
				guint             n);
GList*   g_list_nth_prev       (GList            *list,
				guint             n);
GList*   g_list_find           (GList            *list,
				gconstpointer     data);
GList*   g_list_find_custom    (GList            *list,
				gconstpointer     data,
				GCompareFunc      func);
gint     g_list_position       (GList            *list,
				GList            *llink);
gint     g_list_index          (GList            *list,
				gconstpointer     data);
GList*   g_list_last           (GList            *list);
GList*   g_list_first          (GList            *list);
guint    g_list_length         (GList            *list);
void     g_list_foreach        (GList            *list,
				GFunc             func,
				gpointer          user_data);
GList*   g_list_sort           (GList            *list,
				GCompareFunc      compare_func);
GList*   g_list_sort_with_data (GList            *list,
				GCompareDataFunc  compare_func,
				gpointer          user_data);
gpointer g_list_nth_data       (GList            *list,
				guint             n);

#define g_list_previous(list)	((list) ? (((GList *)(list))->prev) : NULL)
#define g_list_next(list)	((list) ? (((GList *)(list))->next) : NULL)

#endif /* __G_LIST_H__ */
